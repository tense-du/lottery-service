# Lottery Service Environment Configuration
# Copy this file to .env for local development or .env.docker for Docker environment

# ============================================================================
# Database Configuration
# ============================================================================
# PostgreSQL database settings
# For local development: use localhost
# For Docker: use 'db' as host (Docker service name)
POSTGRES_USER=postgres_username
POSTGRES_PASSWORD=postgres_password
POSTGRES_DB=lottery_db

# Database connection URL
# Format: postgresql://user:password@host:port/dbname
# For local development:
# DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}
# For Docker:
# DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}

# ============================================================================
# Redis Configuration (Celery Message Broker)
# ============================================================================
# Redis settings for Celery
# For local development: use localhost
# For Docker: use 'redis' as host (Docker service name)
REDIS_PASSWORD=your_redis_password_here  # Optional, but recommended for security

# ============================================================================
# Application Settings
# ============================================================================
# Maximum number of days in the future for which participants can submit ballots
# Example: 7 means participants can submit ballots for lotteries up to 7 days ahead
LOTTERY_DRAW_DATE_MAX_DAYS_AHEAD=30

# Celery task queue name
# This is the default queue where lottery tasks will be processed
CELERY_DEFAULT_QUEUE=lottery_tasks

# ============================================================================
# Security Settings (Required)
# ============================================================================
# 32-byte key for Fernet encryption (used for encrypting sensitive data like emails)
# Generate securely using:
#   python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
ENCRYPTION_KEY=your_32_byte_key_here

# Salt for hashing sensitive data (used for searching encrypted data)
# Generate securely using:
#   python -c "import secrets; print(secrets.token_hex(16))"
HASH_SALT=your_hash_salt_here